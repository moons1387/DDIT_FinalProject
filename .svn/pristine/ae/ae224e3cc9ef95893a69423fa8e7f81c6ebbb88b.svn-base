var cur_page;

var max_row;

let ctx = document.querySelector('#myChart');

let divCountingTable = document.querySelector('#divCountingTable');

let trs = document.querySelector('#channelChartTbody').querySelectorAll('tr');

let charter;

let data;

let numDatas;

let tbody = document.querySelector('#channelList');

let channelStatisticsBtn = document.querySelector('#channelStatisticsBtn');

channelStatisticsBtn.addEventListener('click', () => {
	cur_page = 1;
	max_row = 20;
	

});

const channelStatisticsRender = () => {
	let data = {
		
	}
}

window.onload = async () => {

	let res = await axios.get('/synerhub/admin/channel/list', axiosHeaderJson);

	res.data.forEach(channel => {
		let tr = document.createElement('tr');

		tr.innerHTML = `
			<tr>
				<td class="align-center">\${}</td>
				<td class="align-center">\${}</td>
				<td>51명</td>
				<td class="align-center">\${}</td>
				<td class="align-center">\${}</td>
			</tr>
		`;
	});

	let trs = tbody.querySelectorAll('tr');

	trs.forEach(tr => {
		let tds = tr.childNodes;
		tds.forEach((td, idx) => {
			if (idx == 1) {
				td.addEventListener('click', channelChartAndTableRender);
			} else if (idx == 3) {
				td.addEventListener('click', channelChartAndTableRender);
			} else if (idx == 5) {
				td.addEventListener('click', channelMemberChartAndTableRender);
			} else if (idx == 7) {
				td.addEventListener('click', currentMemberChartAndTableRender);
			} else if (idx == 9) {
				td.addEventListener('click', dataStorageChartAndTableRender);
			}
		});
	});

}

const channelChartAndTableRender = async () => {
	console.log("chart1");
	divCleaner();

	numDatas = await createData(12, 80);
	numDatas.sort((a, b) => a - b);

	let labels = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'];
	createTable(labels, numDatas, '명');

	const data = {
		labels: labels,
		datasets: [{
			label: '연중 채널인원',
			data: numDatas,
			fill: false,
			borderColor: 'rgb(75, 192, 192)',
			tension: 0.1
		}]
	};

	charter = new Chart(ctx, {
		type: 'line',
		data: data
	});
}

const channelMemberChartAndTableRender = async () => {
	console.log("chart2");
	divCleaner();

	numDatas = await createData(12, 20);

	let labels = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'];
	createTable(labels, numDatas, '명');

	const data = {
		labels: labels,
		datasets: [{
			label: '월별 인원 증가',
			data: numDatas,
			fill: false,
			borderColor: 'rgb(175, 92, 92)',
			tension: 0.1
		}]
	};

	charter = new Chart(ctx, {
		type: 'bar',
		data: data
	});
}

const currentMemberChartAndTableRender = async () => {
	console.log("chart3");
	divCleaner();

	numDatas1 = await createData(7, 10);
	numDatas2 = await createData(7, 50);

	let date = new Date();

	let labels = [];
	let cnt = 0;
	for (let i = 7; i > 0; i--) {
		cnt++;
		let A = date.getDate() - i;
		if (A <= 0) {
			cnt--;
			let date2 = new Date(date.getYear(), date.getMonth(), 0);
			A = date2.getDate - i + cnt;
		}
		A += "일";
		labels.push(A);
	}
	createTable(labels, numDatas1, '명');

	charter = new Chart(ctx, {
		data: {
			datasets: [{
				type: 'bar',
				label: '채널 일간 등록자',
				data: numDatas1
			}, {
				type: 'line',
				label: '채널 일간 접속자',
				data: numDatas2,
			}],
			labels: labels
		}
	});
}

const dataStorageChartAndTableRender = async () => {
	console.log("chart4");
	divCleaner();

	numDatas = await createData(4, 1000);

	let labels = ['문서', '프로젝트', '비품', '클라우드'];
	createTable(labels, numDatas, 'GB');

	data = {
		labels: labels,
		datasets: [{
			label: '채널별 용량 사용비율',
			data: numDatas,
			backgroundColor: [
				'rgb(255, 99, 132)',
				'rgb(54, 162, 235)',
				'rgb(255, 205, 86)',
				'rgb(0, 100, 100)'
			],
			hoverOffset: 4
		}]
	};

	charter = new Chart(ctx, {
		type: 'pie',
		data: data
	});
}

const createTable = (labels, numDatas, sort) => {

	let table = document.createElement('table');
	table.className = "table table-bordered table-hover";
	let thead = document.createElement('thead');
	let tbody = document.createElement('tbody');

	thead.innerHTML = `
				<tr>
					<th>구분</th>
					<th>내역</th>
				</tr>
	`;
	labels.forEach((label, idx) => {
		tbody.innerHTML += `
				<tr>
					<td>\${label}</td>
					<td>\${numDatas[idx]}\${sort}</td>
				</tr>
		`;
	});

	table.appendChild(thead);
	table.appendChild(tbody);
	divCountingTable.appendChild(table);
}

const createData = (length, size) => {
	let data = [];
	for (let i = 0; i < length; i++) {
		data.push(Math.ceil(Math.random() * size))
	}

	return data;
}

const divCleaner = () => {

	if (divCountingTable.childNodes[1]) {
		divCountingTable.childNodes[1].remove();
	}

	if (charter) {
		charter.destroy();
	}

}