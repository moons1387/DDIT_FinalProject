package kr.or.ddit.components.chatting.web;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.naming.spi.DirStateFactory.Result;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.xml.bind.ParseConversionEvent;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.components.chatting.service.IChattingGroupService;
import kr.or.ddit.components.chatting.vo.AlarmVO;
import kr.or.ddit.components.chatting.vo.ChattingGroupVO;
import kr.or.ddit.components.chatting.vo.ChattingMemberVO;
import kr.or.ddit.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class ChatGroupContoller {

	@Inject
	private IChattingGroupService groupService;

	@RequestMapping(value = "Chattinghome", method = RequestMethod.GET)
	public String ChattingForm(Model model) {
		List<ChattingGroupVO> list = groupService.getChattingGroupList();
		model.addAttribute("studyList", list);
		return "study";
	}

	// 스터디그룹 생성(채팅방)
	@RequestMapping(value = "Chattinghome", method = RequestMethod.POST)
	public String insertChatting(ChattingGroupVO group) {
		String goPage = "";
		int result = groupService.insertChatting(group);
		if (result > 0) {
			goPage = "redirect:/Chattinghome";
		} else {
			goPage = "Chatting";
		}
		return goPage;
	}

	// 해당 유저의 안읽은 알람 정보 가져오기
	@ResponseBody
	@PostMapping("/ChattingHome/getAlarmInfo")
	public List<AlarmVO> getAlarmInfo(HttpSession session) {
		MemberVO member = (MemberVO) session.getAttribute("member"); // 수정해야함

		List<AlarmVO> data = groupService.getAlarmInfo(member.getMemId());

		return data;
	}

	// 읽은 알람 삭제하기
	@ResponseBody
	@PostMapping("/studyHome/deleteAlarm")
	public ResponseEntity<String> deleteAlarm(int alarmNo) {
		groupService.deleteAlarm(alarmNo);
		return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	}

	// 스터디 가입하기
	@ResponseBody
	@PostMapping("/joinChatting")
	public ResponseEntity<String> joinChattingGroup(@RequestBody ChattingMemberVO member) {
		int result = groupService.joinChattingGroup(member);

		if (result > 0) {
			return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("FAILED", HttpStatus.BAD_REQUEST);
		}
	}

	// 스터디 그룹 나가기
	@ResponseBody
	@PostMapping("/outChatting")
	public ResponseEntity<String> outStudyGroup(@RequestBody Map<String, String> map) {
		ChattingGroupVO chattingGroup = new ChattingGroupVO();

		int groupNo = Integer.parseInt(map.get("roomId"));
		chattingGroup.setGroupNo(groupNo);
		chattingGroup.setMemNo(Integer.parseInt(map.get("memNo")));

		int result = groupService.outChattingGroup(chattingGroup);

		if (result > 0) {
			return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("FAILED", HttpStatus.BAD_REQUEST);
		}
	}

	// 모든 인원 가져오기
	@ResponseBody
	@PostMapping("/getMembers")
	public List<MemberVO> getMembers(@RequestBody Map<String, String> map) {

		List<MemberVO> memberList = groupService.getMembers();
		
		int groupNo = Integer.parseInt(map.get("groupNo"));

		List<ChattingMemberVO> list = groupService.getChattingMember(groupNo);

		for (int i = 0; i < memberList.size(); i++) {
			for (int j = 0; j < list.size(); j++) {
				log.info(memberList.get(i).getMemId());
				
				if(memberList.get(i).getMemId().equals(list.get(j).getMemNo())) {
					memberList.remove(i); // 이미 초대된 인원 빼기
					i--;
					break;
				}
			}
		}
		return memberList;
	}

	// 초대하기
	@PostMapping("/join")
	public ResponseEntity<String> join(@RequestBody List<Integer> data) {

		ResponseEntity<String> result = null;
		int groupNo = data.get(0);

		for (int i = 1; i < data.size(); i++) {
			MemberVO member = new MemberVO();
			log.info("id : " + data.get(i));
			member.setMemNo(data.get(i));

			member = groupService.getUser(member);

			ChattingMemberVO chattingMember = new ChattingMemberVO();
			chattingMember.setGroupNo(groupNo);
			chattingMember.setMemNo(member.getMemNo());
			chattingMember.setUserName(member.getMemName());
			chattingMember.setAuthRole("채팅원");

			joinChattingGroup(chattingMember);
		}

		return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	}
}
